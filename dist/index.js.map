{"version":3,"file":"index.js","sources":["../src/type_map.ts","../src/argv.ts","../src/console_style.ts","../src/paint_type.ts","../src/package_object.ts","../src/cl_opts.ts"],"sourcesContent":["export type TypeMapFunction<T extends string | string[] | null = string | string[] | null, R = any> = (args: T, initialValue: any) => R\nexport interface TypeMapAddTypeOptions {\n  empty: boolean\n  array: boolean\n}\n\nclass TypeMap<R = any> {\n  private readonly _types: Map<string, { func: TypeMapFunction, options: Partial<TypeMapAddTypeOptions> }> = new Map()\n\n  add (name: string, func: TypeMapFunction<string[] | null, R>, options: TypeMapAddTypeOptions): this\n  add (name: string, func: TypeMapFunction<string | null, R>, options: { empty: true }): this\n  add (name: string, func: TypeMapFunction<string[], R>, options: { array: true }): this\n  add (name: string, func: TypeMapFunction<string, R>, options?: Partial<TypeMapAddTypeOptions>): this\n  add (name: string, func: TypeMapFunction<any, R>, options: Partial<TypeMapAddTypeOptions> = {}) {\n    this._types.set(name, { func, options })\n    return this\n  }\n\n  cast (name: string, args: string[], defaultValue: any): R {\n    const changeTypeMap = this._types.get(name)\n    if (!changeTypeMap) { throw Error(`Type '${name}' is undefined.`) }\n\n    let arg: string | string[] | null\n    if (args.length > 1) {\n      if (changeTypeMap.options.array) {\n        arg = args\n      } else {\n        throw Error(`Multiple arguments '[${args.join(', ')}]' were specified.`)\n      }\n    } else if (args.length < 1) {\n      if (changeTypeMap.options.empty) {\n        arg = null\n      } else {\n        throw Error('Nothing is assigned to the argument to convert.')\n      }\n    } else {\n      arg = args[0]\n    }\n\n    return changeTypeMap.func(arg, defaultValue)\n  }\n}\n\nexport default TypeMap\n","const command = process.argv[1]\nconst argv = process.argv.slice(2)\n\nconst entries: string[] = []\nconst options: { [key: string]: string[] } = {}\n\nlet key\nfor (const arg of argv) {\n  if (/^-/.test(arg)) {\n    key = arg\n    if (!(key in options)) { options[key] = [] }\n    continue\n  }\n\n  if (key === undefined) {\n    entries.push(arg)\n    continue\n  }\n\n  options[key].push(arg)\n}\n\nexport { command, entries, options }\n","export const reset = '\\u001b[0m'\n\nexport const bold = '\\u001b[1m'\nexport const light = '\\u001b[2m'\nexport const italic = '\\u001b[3m'\nexport const underline = '\\u001b[4m'\n\nexport const resetColor = '\\u001b[39m'\nexport const black = '\\u001b[30m'\nexport const red = '\\u001b[31m'\nexport const green = '\\u001b[32m'\nexport const yellow = '\\u001b[33m'\nexport const blue = '\\u001b[34m'\nexport const magenta = '\\u001b[35m'\nexport const cyan = '\\u001b[36m'\nexport const white = '\\u001b[37m'\n\nexport const lightBlack = '\\u001b[90m'\nexport const lightRed = '\\u001b[91m'\nexport const lightGreen = '\\u001b[92m'\nexport const lightYellow = '\\u001b[93m'\nexport const lightBlue = '\\u001b[94m'\nexport const lightMagenta = '\\u001b[95m'\nexport const lightCyan = '\\u001b[96m'\nexport const lightWhite = '\\u001b[97m'\n\nexport const backGroundBlack = '\\u001b[40m'\nexport const backGroundRed = '\\u001b[41m'\nexport const backGroundGreen = '\\u001b[42m'\nexport const backGroundYellow = '\\u001b[43m'\nexport const backGroundBlue = '\\u001b[44m'\nexport const backGroundMagenta = '\\u001b[45m'\nexport const backGroundCyan = '\\u001b[46m'\nexport const backGroundWhite = '\\u001b[47m'\n\nexport const backGroundLightBlack = '\\u001b[100m'\nexport const backGroundLightRed = '\\u001b[101m'\nexport const backGroundLightGreen = '\\u001b[102m'\nexport const backGroundLightYellow = '\\u001b[103m'\nexport const backGroundLightBlue = '\\u001b[104m'\nexport const backGroundLightMagenta = '\\u001b[105m'\nexport const backGroundLightCyan = '\\u001b[106m'\nexport const backGroundLightWhite = '\\u001b[107m'\n","import * as ConsoleStyle from './console_style'\nimport { Json, JsonValue } from './types/json'\n\nconst objectPaintType = (type: null | JsonValue[] | Json): string => {\n  if (type === null) { return `${ConsoleStyle.lightMagenta}${ConsoleStyle.bold}null${ConsoleStyle.reset}` }\n\n  if (Array.isArray(type)) {\n    return `[${type.map(item => paintType(item)).join(', ')}]`\n  }\n\n  const items = Object.entries(type).map(([key, value]) => `${key}: ${paintType(value)}`)\n  if (items.length > 1) {\n    items[0] = ` ${items[0]}`\n    items[items.length - 1] = `${items[items.length - 1]} `\n  }\n  return `{${items.join(', ')}}`\n}\n\nconst paintType = (type: JsonValue) => {\n  switch (typeof type) {\n    case 'number':\n    case 'bigint':\n      return `${ConsoleStyle.cyan}${type}${ConsoleStyle.reset}`\n\n    case 'string':\n      return `${ConsoleStyle.green}${type}${ConsoleStyle.reset}`\n\n    case 'boolean':\n      return `${ConsoleStyle.yellow}${type}${ConsoleStyle.reset}`\n\n    case 'object':\n      return objectPaintType(type)\n  }\n}\n\nexport default paintType\n","import * as path from 'path'\nimport { Json } from './types/json'\n\nconst packageObject: Json = {}\n\ntry {\n  const readPath = path.join(process.cwd(), 'package.json')\n  const readPackage = require(readPath)\n  Object.assign(packageObject, readPackage)\n} catch (error) { }\n\nexport default packageObject\n","import * as path from 'path'\nimport TypeMap from './type_map'\nimport * as Argv from './argv'\nimport * as ConsoleStyle from './console_style'\nimport paintType from './paint_type'\nimport packageObject from './package_object'\n\n/**\n * A type is the type that can be specified as a value for the command line option.\n */\nexport type ClOptsValue = string | number | boolean | string[] | { [key: string]: string }\n\n/**\n * An object is an option for defining options.\n */\nexport interface ClOptsObject {\n  /**\n   * A value that represents the initial value of the option.\n   * It can be a string, number, boolean, array<string>, or object<string>.\n   */\n  value: ClOptsValue\n\n  /**\n  * A string representing the short form of the command line option.\n  */\n  short?: string | null\n\n  /**\n   * A Boolean value indicating that an optional setting should be made.\n   */\n  required?: boolean\n\n  /**\n   * A number that represents the order of values that this option takes from the command line.\n   * If a required option is not set, it will automatically be set as a required option.\n   */\n  entry?: number\n\n  /**\n   * A string that describes the command line option.\n   */\n  description?: string\n}\n\n/**\n * An object specifies characteristics about the options.\n */\nexport interface ClOptsObjectMap {\n  [key: string]: string | Partial<ClOptsObject>\n}\n\n/**\n * An options object specifies characteristics about the clOpts.\n */\nexport interface ClOptsOptions {\n  /**\n   * A string indicating that the command is displayed as the calling method when displaying the usage.\n   */\n  command: string\n\n  /**\n   * A Boolean value that indicates whether to show the type when showing the option.\n   */\n  showType: boolean\n  /**\n   * A Boolean value that indicates whether to show the default value when showing the option.\n   */\n  showDefault: boolean\n\n  /**\n   * An object that outputs the log.\n   */\n  logger: {\n    log (...label: any[]): void\n    warn (...label: any[]): void\n    error (...label: any[]): void\n    group (...label: any[]): void\n    groupEnd (): void\n  }\n}\n\n/**\n * An options object specifies the characteristics of how to get the value.\n */\nexport interface ClOptsGetOptions {\n  /**\n   * A Boolean value indicating that the config file should be referenced when getting the value.\n   */\n  file?: boolean\n\n  /**\n   * A Boolean value indicating that the command line should be referenced when getting the value.\n   */\n  command?: boolean\n}\n\nexport class ClOpts<T extends ClOptsObjectMap, K extends Extract<keyof T, string> | 'help' | 'version'> {\n  private readonly _typeMap = new TypeMap<ClOptsValue>()\n  private readonly _setArgvOptionsMap: Map<string, ClOptsObject> = new Map()\n  private readonly _clOptsOptions: ClOptsOptions\n  private _entries: string[] = []\n  private _needsShowHelp = true\n  private _needsShowVersion = true\n\n  /**\n   * An object of settings obtained from the default options.\n   */\n  readonly options: { [key: string]: ClOptsValue } = {}\n\n  /**\n   * An object of settings obtained from the command line.\n   */\n  readonly commandOptions: { [key: string]: ClOptsValue } = {}\n\n  /**\n   * An object of settings obtained from the file options.\n   */\n  readonly fileOptions: { [key: string]: ClOptsValue } = {}\n\n  /**\n   * ClOpts is a class that sets options at run time.\n   * Options can be entered from the command line or from a configuration file.\n   * @param map An object specifies characteristics about the options.\n   * @param options An options object specifies characteristics about the clOpts.\n   */\n  constructor (map: T, options: Partial<ClOptsOptions> = {}) {\n    this._clOptsOptions = {\n      command: options.command || path.basename(Argv.command, path.extname(Argv.command)),\n      showType: typeof options.showType === 'boolean' ? options.showType : true,\n      showDefault: typeof options.showDefault === 'boolean' ? options.showDefault : true,\n      logger: options.logger || console\n    }\n\n    const optionMap = this._addDefaultOptions(map)\n\n    const optionsEntries = Object.entries(optionMap).sort(([a], [b]) => {\n      if (a < b) { return -1 }\n      if (a > b) { return 1 }\n      return 0\n    })\n\n    for (const [name, options] of optionsEntries) {\n      const addOptions = this._castOptions(options)\n\n      if (addOptions.entry !== undefined) {\n        if (this._entries[addOptions.entry]) {\n          throw Error(`The Entry number '${addOptions.entry}' has already been created.`)\n        }\n        this._entries[addOptions.entry - 1] = name\n      }\n\n      this.options[name] = addOptions.value\n\n      this._setArgvOptionsMap.set(name, addOptions)\n    }\n\n    this._init()\n  }\n\n  private _addDefaultOptions<U extends ClOptsObjectMap> (map: U) {\n    return {\n      help: {\n        short: 'h',\n        description: 'Print this message.'\n      },\n      version: {\n        short: 'v',\n        description: 'Print the project version.'\n      },\n      ...map\n    }\n  }\n\n  private _castOptions (options: string | Partial<ClOptsObject>) {\n    options = typeof options === 'string' ? { description: options } : { ...options }\n\n    if (options.value === undefined) {\n      options.value = false\n    }\n\n    if (options.entry !== undefined && options.required === undefined) {\n      options.required = true\n    }\n\n    return options as ClOptsObject\n  }\n\n  private _init () {\n    this._addTypes()\n    this._updateShort()\n\n    try {\n      this._setEntries()\n      this._setArgv()\n      this._commandRunIfNeeded()\n      this._checkRequired()\n    } catch (error) {\n      this._clOptsOptions.logger.error(`${ConsoleStyle.red}${error}${ConsoleStyle.reset}`)\n      process.exit(-1)\n    }\n  }\n\n  private _addTypes () {\n    this._typeMap.add('string', (arg) => arg)\n    this._typeMap.add('number', (arg) => {\n      const number = Number(arg)\n      if (Number.isNaN(number)) { throw Error(`Cannot cast '${arg}' to number type.`) }\n      return number\n    })\n    this._typeMap.add('boolean', (arg, initialValue) => {\n      if (arg === null) { return !initialValue }\n      if (/^true$/i.test(arg)) { return true }\n      if (/^false$/i.test(arg)) { return false }\n      throw Error(`Cannot cast '${arg}' to boolean type.`)\n    }, { empty: true })\n    this._typeMap.add('string[]', (args) => args, { array: true })\n    this._typeMap.add('object', (args) => args.reduce((obj, arg) => {\n      const parse = arg.split(':')\n      const key = parse.shift()\n      if (!key) { throw Error(`Cannot cast '${arg}' to json type.`) }\n      const value = parse.join(':')\n      obj[key] = value\n      return obj\n    }, {} as { [key: string]: string }), { array: true })\n  }\n\n  private _setEntries () {\n    const names = this._entries\n    const entries = Argv.entries\n    if (names.length < entries.length) {\n      const overEntries = entries.slice(names.length)\n      throw Error(`The '${overEntries.join(', ')}' arguments is exceeded. Argv has too many arguments.`)\n    }\n\n    let index = 0\n    for (const name of names) {\n      if (!name) { continue }\n      const args = entries[index]\n      if (!args) { continue }\n\n      const options = this.getOptions(name as K)\n      const type = Array.isArray(options.value) ? 'array' : typeof options.value\n      this.commandOptions[name] = this._typeMap.cast(type, [args], options.value)\n      index++\n    }\n  }\n\n  private _setArgv () {\n    const unknownOptions: string[] = []\n    for (const [key, optionValue] of Object.entries(Argv.options)) {\n      let optionName: string\n      try {\n        optionName = this.stringToOptionName(key)\n      } catch (error) {\n        unknownOptions.push(key)\n        continue\n      }\n\n      const options = this._setArgvOptionsMap.get(optionName)\n      if (!options) {\n        unknownOptions.push(key)\n        continue\n      }\n\n      const type = Array.isArray(options.value) ? 'string[]' : typeof options.value\n      const value = this._typeMap.cast(type, optionValue, options.value)\n      this.commandOptions[optionName] = value\n    }\n\n    if (unknownOptions.length > 0) {\n      throw Error(`'${unknownOptions.join(', ')}' is an invalid option name.`)\n    }\n  }\n\n  private _checkRequired () {\n    const errorRequired: string[] = []\n\n    for (const [name, { required }] of this._setArgvOptionsMap) {\n      if (!required) { continue }\n      if (name in this.commandOptions) { continue }\n\n      errorRequired.push(name)\n    }\n\n    if (errorRequired.length > 0) {\n      throw Error(`'${errorRequired.join(', ')}' must be declared from the command line.`)\n    }\n  }\n\n  private _updateShort () {\n    const optionShorts = [...this._setArgvOptionsMap.values()].map(options => options.short).filter(Boolean) as string[]\n\n    const shorts = [...new Set(optionShorts)]\n    if (optionShorts.length !== shorts.length) {\n      const duplicateShort = optionShorts.filter(i => !shorts.includes(i))\n      throw Error(`Duplicate value ‘${duplicateShort.join(', ')}’ for short option.`)\n    }\n\n    const duplicateName = [...this._setArgvOptionsMap.keys()].filter(i => shorts.includes(i))\n    if (duplicateName.length > 0) {\n      throw Error(`Short option value '${duplicateName.join(', ')}' duplicates option name.`)\n    }\n\n    for (const [name, options] of this._setArgvOptionsMap) {\n      if (options.short !== undefined) { continue }\n\n      let checkShort: string = ''\n      for (const char of name) {\n        checkShort += char\n        if (checkShort === name) {\n          options.short = null\n          break\n        }\n\n        if (!shorts.includes(checkShort)) {\n          options.short = checkShort\n          shorts.push(checkShort)\n          break\n        }\n      }\n    }\n  }\n\n  private _commandRunIfNeeded (options?: ClOptsGetOptions) {\n    if (this._needsShowHelp && this.get('help' as K, options)) {\n      this._needsShowHelp = false\n\n      this._showConsoleHelp()\n\n      const isArgvHelp = Object.keys(this.commandOptions).includes('help')\n      if (isArgvHelp) { process.exit(0) }\n    }\n\n    if (this._needsShowVersion && this.get('version' as K, options)) {\n      this._needsShowVersion = false\n\n      this.showVersion()\n\n      const isArgvVersion = Object.keys(this.commandOptions).includes('version')\n      if (isArgvVersion) { process.exit(0) }\n    }\n  }\n\n  private _showConsoleHelp () {\n    const commandKeys = Object.keys(this.commandOptions)\n    const showOptionNames = new Set(commandKeys.filter(key => key !== 'help'))\n\n    for (const keywords of Object.values(Argv.options)) {\n      if (keywords.length < 1) { continue }\n      const hits = this.search(...keywords)\n      if (hits.length < 1) {\n        this._clOptsOptions.logger.warn(`${ConsoleStyle.yellow}Options unknown. The searched keyword is '${keywords.join(' ')}'${ConsoleStyle.reset}`)\n      }\n\n      for (const hit of hits) {\n        showOptionNames.add(hit)\n      }\n    }\n\n    try {\n      this.showUsage()\n      this._clOptsOptions.logger.log()\n      this.showOptions(...showOptionNames)\n    } catch (error) {\n      this._clOptsOptions.logger.log(`${ConsoleStyle.red}${error}${ConsoleStyle.reset}`)\n    }\n  }\n\n  /**\n   * The ClOpts method getOptions() get the options.\n   * @param name A string that represents the option name to be acquired.\n   */\n  getOptions (name: K) {\n    const options = this._setArgvOptionsMap.get(name)\n    if (!options) { throw Error(`'${name}' is an invalid option name.`) }\n    return options\n  }\n\n  /**\n   * The ClOpts method search() searches for options and returns a list of matching option names.\n   * @param keywords Keywords to search.\n   */\n  search (...keywords: string[]) {\n    const result: string[] = []\n\n    for (const [name, options] of this._setArgvOptionsMap) {\n      let isHit = true\n      for (const keyword of keywords) {\n        if (name.indexOf(keyword) > -1) { continue }\n        if (options.short && options.short.indexOf(keyword) > -1) { continue }\n        if (options.description && options.description.indexOf(keyword) > -1) { continue }\n\n        isHit = false\n        break\n      }\n\n      if (isHit) { result.push(name) }\n    }\n\n    return result\n  }\n\n  /**\n   * The ClOpts method get() get the options value.\n   * @param name A string that represents the option name to be acquired.\n   * @param options Specifies the characteristics of how to get the value.\n   */\n  get (name: K, options: boolean | ClOptsGetOptions = true) {\n    if (typeof options === 'boolean') {\n      options = { file: options, command: options }\n    }\n\n    let value: ClOptsValue = this.getOptions(name).value\n    if (options.file) {\n      try {\n        const fileOptions = this.fileOptions\n        const fileValue = fileOptions[name]\n        if (fileValue !== undefined) { value = fileValue }\n      } catch (error) {\n        this._clOptsOptions.logger.error(`${ConsoleStyle.red}${error}${ConsoleStyle.reset}`)\n        process.exit(-1)\n      }\n    }\n\n    if (options.command) {\n      const commandOptions = this.commandOptions\n      const commandValue = commandOptions[name]\n      if (commandValue !== undefined) { value = commandValue }\n    }\n\n    return value\n  }\n\n  /**\n   * The ClOpts method getAll() gets all the options.\n   * @param options Specifies the characteristics of how to get the value.\n   */\n  getAll (options: boolean | ClOptsGetOptions = true) {\n    const result = {} as { [U in K]: ClOptsValue }\n\n    for (const name of this._setArgvOptionsMap.keys() as IterableIterator<K>) {\n      result[name] = this.get(name, options)\n    }\n\n    return result as {\n      [U in K]: U extends 'help'\n      ? boolean\n      : U extends 'version'\n      ? boolean\n      : T[U] extends ClOptsObject\n      ? T[U]['value']\n      : boolean\n    }\n  }\n\n  /**\n   * The ClOpts method stringToOptionName() converts a string into an option name.\n   * The string to convert is an option name with a short handler and a hyphen.\n   * @param key List of configuration files to add.\n   */\n  stringToOptionName (key: string): K {\n    if (/^-[^-]/.test(key)) {\n      const short = key.slice(1)\n      for (const [optionNames, options] of this._setArgvOptionsMap) {\n        if (options.short === short) { return optionNames as K }\n      }\n    } else {\n      const resultName = key.replace(/^--/, '')\n      if (this._setArgvOptionsMap.has(resultName)) {\n        return resultName as K\n      }\n    }\n\n    throw Error(`Unknown command options '${key}'.`)\n  }\n\n  /**\n   * The ClOpts method setConfigFile() adds a configuration file to read.\n   * @param files List of configuration files to add.\n   */\n  setConfigFile (...files: [string, ...string[]]) {\n    for (const file of files) {\n      try {\n        const filePath = path.join(process.cwd(), file)\n        const options = require(filePath)\n        for (const key of Object.keys(options)) {\n          if ([...this._setArgvOptionsMap.keys()].includes(key)) { continue }\n          throw Error(`The ’${file}’ option in the '${key}' file is an invalid option name.`)\n        }\n\n        Object.assign(this.fileOptions, options)\n      } catch (error) {\n        if (error.code === 'MODULE_NOT_FOUND') { continue }\n        throw error\n      }\n    }\n\n    this._commandRunIfNeeded({ file: true })\n\n    return this\n  }\n\n  /**\n   * The ClOpts method showVersion() displays the package version in the console.\n   * The version is automatically obtained from package.json.\n   */\n  showVersion () {\n    if (packageObject.version) {\n      this._clOptsOptions.logger.log('version:', paintType(packageObject.version))\n    } else {\n      this._clOptsOptions.logger.log('version is undefined.')\n    }\n\n    return this\n  }\n\n  /**\n   * The ClOpts method showUsage() shows how to declare it on the command line in the console.\n   */\n  showUsage () {\n    this._clOptsOptions.logger.group('Usage:')\n\n    const messages = [this._clOptsOptions.command]\n    if (this._entries.length > 0) {\n      const entries = this._entries.map(name => `[${name}]`)\n      messages.push(`${ConsoleStyle.green}${entries.join(' ')}${ConsoleStyle.reset}`)\n    }\n    messages.push(`${ConsoleStyle.blue}<options>${ConsoleStyle.reset}`)\n\n    const message = messages.join(' ')\n    this._clOptsOptions.logger.log(message)\n\n    this._clOptsOptions.logger.groupEnd()\n\n    return this\n  }\n\n  /**\n   * The ClOpts method showOptions() displays a list of options in the console.\n   * @param names List of options to display. If not specified, all options will be displayed.\n   */\n  showOptions (...names: string[]) {\n    this._clOptsOptions.logger.group('Options:')\n\n    const showNames = names = names.length < 1\n      ? [...this._setArgvOptionsMap.keys()]\n      : names.map(name => this.stringToOptionName(name))\n\n    const helps = showNames.map(name => {\n      const options = this.getOptions(name as K)\n\n      return {\n        name: `--${name}`,\n        short: options.short ? `-${options.short}` : '',\n        type: Array.isArray(options.value) ? 'array' : typeof options.value,\n        value: options.value,\n        required: options.required,\n        description: options.description || ''\n      }\n    })\n\n    const maxNameLength = Math.max(...helps.map(i => i.name.length))\n    const maxShortLength = Math.max(...helps.map(i => i.short.length))\n    const maxTypeLength = Math.max(...helps.map(i => i.type.length))\n\n    for (const help of helps) {\n      const name = `${ConsoleStyle.blue}${help.name.padEnd(maxNameLength)}${ConsoleStyle.reset}`\n      const short = `${ConsoleStyle.blue}${help.short.padEnd(maxShortLength)}${ConsoleStyle.reset}`\n      let message = `${name} ${short}`\n\n      if (this._clOptsOptions.showType) {\n        const type = `${ConsoleStyle.green}${help.type.padEnd(maxTypeLength)}${ConsoleStyle.reset}`\n        message += ` ${type}`\n      }\n\n      message += ` ${help.description}`\n\n      if (this._clOptsOptions.showDefault && !help.required) {\n        const value = `${ConsoleStyle.blue}(default:${ConsoleStyle.reset} ${paintType(help.value)}${ConsoleStyle.blue})${ConsoleStyle.reset}`\n        message += ` ${value}`\n      }\n\n      this._clOptsOptions.logger.log(message)\n    }\n\n    this._clOptsOptions.logger.groupEnd()\n\n    return this\n  }\n}\n"],"names":["ConsoleStyle.lightMagenta","ConsoleStyle.bold","ConsoleStyle.reset","ConsoleStyle.cyan","ConsoleStyle.green","ConsoleStyle.yellow","path.join","path.basename","Argv.command","path.extname","ConsoleStyle.red","entries","Argv.entries","Argv.options","ConsoleStyle.blue"],"mappings":"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"}